#include "implementation.oil"

CPU ATMEL_AT91SAM7S256
{
  OS LEJOS_OSEK
  {
    STATUS = EXTENDED;
    STARTUPHOOK = FALSE;
    ERRORHOOK = FALSE;
    SHUTDOWNHOOK = FALSE;
    PRETASKHOOK = FALSE;
    POSTTASKHOOK = FALSE;
    USEGETSERVICEID = FALSE;
    USEPARAMETERACCESS = FALSE;
    USERESSCHEDULER = FALSE;
  };
  
  /* Definition of application mode */
  APPMODE appmode1{};
  
  COUNTER SysTimerCnt
  {
    MINCYCLE = 1;
    MAXALLOWEDVALUE = 10000;
    TICKSPERBASE = 1; /* One tick is equal to 1ms */ 
  };
  
  /*-------------------------------------------------------------------------*/
  /* BackgroundAlways aperiodic task while(1), priority 1                    */
  /*-------------------------------------------------------------------------*/
  TASK BackgroundAlways
  {
    PRIORITY = 1; /* Smaller value means lower priority */
    ACTIVATION = 1;
    SCHEDULE = FULL;
    STACKSIZE = 512;
    AUTOSTART = TRUE
    {
      APPMODE = appmode1;
    };
  };
  
  /*-------------------------------------------------------------------------*/
  /* Display periodic every 500ms, priority 2                                */
  /*-------------------------------------------------------------------------*/
  TASK Display
  {
    PRIORITY = 2;
    AUTOSTART = FALSE;
    ACTIVATION = 1;
    SCHEDULE = FULL;
    STACKSIZE = 512;
  };
  ALARM cyclic_display
  {
    AUTOSTART = TRUE
    {
      CYCLETIME = 500;
      ALARMTIME = 1;
      APPMODE = appmode1;
    };
    COUNTER = SysTimerCnt;
    ACTION = ACTIVATETASK
    {
      TASK = Display;
    };
  };
  
  /*-------------------------------------------------------------------------*/
  /* ReadSensors periodic every 45ms, priority 3                             */
  /*-------------------------------------------------------------------------*/
  TASK ReadSensors
  {
    PRIORITY = 3;
    AUTOSTART = FALSE;
    ACTIVATION = 1;
    SCHEDULE = FULL;
    STACKSIZE = 512;
  };
  ALARM cyclic_read_sensors
  {
    AUTOSTART = TRUE
    {
      CYCLETIME = 45;
      ALARMTIME = 1;
      APPMODE = appmode1;
    };
    COUNTER = SysTimerCnt;
    ACTION = ACTIVATETASK
    {
      TASK = ReadSensors;
    };
  };
  
  /*-------------------------------------------------------------------------*/
  /* LineFollower aperiodic task while(1), event-driven, priority 4          */
  /*-------------------------------------------------------------------------*/
  TASK LineFollower
  {
    PRIORITY = 4;
    
    EVENT = LineUpdateEvent;
    EVENT = ObjectDetectedEvent;
    EVENT = TimerCompleteEvent;
    EVENT = DriveCompleteEvent;
    EVENT = SteerCompleteEvent;
    
    ACTIVATION = 1;
    SCHEDULE = FULL;
    STACKSIZE = 512;
    AUTOSTART = TRUE
    {
      APPMODE = appmode1;
    };
  };
  EVENT LineUpdateEvent { MASK = AUTO; };
  EVENT ObjectDetectedEvent { MASK = AUTO; };
  EVENT TimerCompleteEvent { MASK = AUTO; };
  EVENT DriveCompleteEvent { MASK = AUTO; };
  EVENT SteerCompleteEvent { MASK = AUTO; };
  
  /*-------------------------------------------------------------------------*/
  /* MotorRevControl aperiodic task while(1), event-driven, priority 5       */
  /*-------------------------------------------------------------------------*/
  TASK MotorRevControl
  {
    PRIORITY = 5;
    
    EVENT = RevCheckEvent;
    EVENT = TimerStartEvent;
    EVENT = DriveStartEvent;
    EVENT = SteerStartEvent;
    
    ACTIVATION = 1;
    SCHEDULE = FULL;
    STACKSIZE = 512;
    AUTOSTART = TRUE
    {
      APPMODE = appmode1;
    };
  };
  EVENT RevCheckEvent { MASK = AUTO; };
  EVENT TimerStartEvent { MASK = AUTO; };
  EVENT DriveStartEvent { MASK = AUTO; };
  EVENT SteerStartEvent { MASK = AUTO; };
  
  /*-------------------------------------------------------------------------*/
  /* Check on revolution count every 50ms for fine-tuning operations         */
  /*-------------------------------------------------------------------------*/
  ALARM cyclic_rev_timer
  {
    AUTOSTART = TRUE
    {
      CYCLETIME = 50;
      ALARMTIME = 1;
      APPMODE = appmode1;
    };
    COUNTER = SysTimerCnt;
    ACTION = SETEVENT
    {
      TASK = MotorRevControl;
      EVENT = RevCheckEvent;
    };
  };
  
  /*-------------------------------------------------------------------------*/
  /* MotorSpeedControl aperiodic task while(1), event-driven, priority 6     */
  /*-------------------------------------------------------------------------*/
  TASK MotorSpeedControl
  {
    PRIORITY = 6;
    
    EVENT = MotorStartEvent;
    EVENT = MotorStopEvent;
    
    ACTIVATION = 1;
    SCHEDULE = FULL;
    STACKSIZE = 512;
    AUTOSTART = TRUE
    {
      APPMODE = appmode1;
    };
  };
  EVENT MotorStopEvent { MASK = AUTO; };
  EVENT MotorStartEvent { MASK = AUTO; };
  
};
